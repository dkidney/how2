[["index.html", "how2 Links", " how2 Darren Kidney 2024-02-22 Links "],["python.html", "Chapter 1 python 1.1 installation 1.2 basics 1.3 standard library 1.4 data science packages 1.5 package managers and environments 1.6 IDEs", " Chapter 1 python 1.1 installation 1.2 basics 1.3 standard library 1.4 data science packages 1.4.1 numpy 1.4.2 pandas 1.5 package managers and environments 1.5.1 pipenv 1.6 IDEs 1.6.1 pycharm "],["cli.html", "Chapter 2 cli 2.1 git 2.2 bash 2.3 awscli", " Chapter 2 cli 2.1 git 2.1.1 FAQs unstage files but don’t undo the changes 2.1.2 terminology HEAD The snapshot of your last commit on the current branch HEAD = HEAD^ = HEAD~1 = HEAD~2 = index I.e.the staging area = your proposed next commit working directory Aka working tree = a sandbox, where you can try changes out before committing them to your staging area (index) 2.1.3 git reset undo commits by reseting the current HEAD to a previous state (specified by &lt;commit&gt;) deletes commits, unlike git revert which makes a new commit mode mode reset HEAD reset index reset working tree --soft YES NO NO --mixed YES YES NO --hard YES YES YES examples git reset --soft HEAD~1 # undo the last commit but KEEP file changes git reset --hard HEAD~1 # undo the last commit and UNDO file changes git reset --hard 12345678 # roll back to commit 12345678 git reset myfile.txt # remove myfile.txt from the staging area but KEEP changes 2.1.4 git restore undo a git add examples git restore --staged myfile.txt # remove myfile.txt from the staging area but KEEP changes git restore myfile.txt # remove myfile.txt from the staging area and UNDO changes 2.1.5 git revert undo commits by creating a new ’reverting commit` unlike git reset which deletes commits examples 2.1.6 .gitignore 2.2 bash 2.2.1 variables 2.2.2 arrays 2.2.3 for loops 2.3 awscli 2.3.1 FAQs copy only files with specific file extension copy all files except those with a specific file extension "],["r.html", "Chapter 3 r 3.1 bookdown", " Chapter 3 r 3.1 bookdown https://bookdown.org/yihui/bookdown/ 3.1.1 create a new book repo and set up github pages See https://bookdown.org/yihui/bookdown/get-started.html and https://bookdown.org/yihui/bookdown/github.html sign in to github go to https://github.com/rstudio/bookdown-demo and click on Use this template and then Create a new repository choose a name for your repo and click Create repository clone the repo open _bookdown.yml, change book_filename and add the line output_dir: \".\" open _output.yml and edit the toc before and after lines open README.md and put a link to github pages https://&lt;user-name&gt;.github.io/&lt;repo-name&gt;/ open index.Rmd and edit title, author and github-repo and make any other changes you want, but don’t delete the r chunk that contains this code: # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) create a hidden file .nojekyll touch .nojekyll make sure the bookdown package is installed: install.packages(&#39;bookdown&#39;) build the book - make sure you see the message Output created: index.html in the console after running the code below rmarkdown::clean_site(preview = FALSE) rmarkdown::render_site(output_format = &#39;bookdown::gitbook&#39;, encoding = &#39;UTF-8&#39;) push changes git add --all &amp;&amp; git commit -m &#39;first commit&#39; &amp;&amp; git push go to the repository page on github for your new repo click on Settings then Pages under Build and deployment Branch choose main and then /root and then click save you should see your pages under https://&lt;user-name&gt;.github.io/&lt;repo-name&gt;/ 3.1.2 customisation 3.1.2.1 _output.yml bookdown::gitbook: fontsettings: theme: night "],["sql.html", "Chapter 4 sql 4.1 Example one 4.2 Example two", " Chapter 4 sql Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],["misc.html", "Chapter 5 misc 5.1 math example", " Chapter 5 misc You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 1. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 1. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 5.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 5.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 5.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 5.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2023) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). 5.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 References "],["references.html", "References", " References "]]
